{"version":3,"sources":["logo.svg","Slider.js","worker.js","workerSetup.js","Canvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","ContinuousSlider","props","classes","React","useState","setValue","className","Typography","id","gutterBottom","label","Grid","container","spacing","item","xs","Slider","value","onChange","event","newValue","callback","aria-labelledby","valueLabelDisplay","max","min","createSet","th","be","dimensions","circles","r","radius","maxx","x","maxy","y","cosTh","Math","cos","sinTh","sin","cosBe","sinBe","xFit","floor","yFit","y_i","x_i","An","Bn","Cn","Dn","shiftLenX","shiftLenY","push","self","addEventListener","e","data","performance","efficiency","minx","miny","t0","now","type","i","circle","random","maxAngle","PI","temp_data","th_i","be_i","currTh","currBe","length","console","log","circleArea","postMessage","WebWorker","worker","code","toString","blob","Blob","Worker","URL","createObjectURL","Canvas","state","ctx","randomSpot","bind","uniformSpots","analyticSpots","drawAll","this","refs","canvas","getContext","requestAnimationFrame","setState","setMetrics","numCircles","prevProps","width","height","clearCanvas","windowwidth","windowheight","drawRect","forEach","drawCircle","fillStyle","fillRect","beginPath","arc","fill","stroke","w","h","Button","onClick","ref","style","border","Component","theme","flexGrow","paper","padding","margin","textAlign","color","palette","text","secondary","App","canvasWidth","setWidth","canvasHeight","setHeight","circleRadius","setRadius","metrics","direction","justify","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0233cf4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useEffect, useCallback } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { getThemeProps } from '@material-ui/styles';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    \r\n  },\r\n});\r\n\r\nexport default function ContinuousSlider(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(100);\r\n\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n    props.callback(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography id=\"continuous-slider\" gutterBottom>\r\n        {props.label}\r\n      </Typography>\r\n      <Grid container spacing={3}>\r\n        <Grid item>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Slider \r\n          value={props.value} \r\n          onChange={handleChange} \r\n          aria-labelledby=\"continuous-slider\"\r\n          valueLabelDisplay=\"auto\"\r\n          max ={props.max}\r\n          min={props.min} />\r\n        </Grid>\r\n        <Grid item>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","\r\n\r\nexport default () => {\r\n  \r\n    self.addEventListener('message', e => { //eslint-disable-line no-restricted-globals\r\n      // eslint-disable-line no-restricted-globals\r\n\r\n      if (!e) return;\r\n      let dimensions = e.data;\r\n\r\n      let circles = [];\r\n      let data = {\r\n        performance: null,\r\n        efficiency: null,\r\n        circles: [],\r\n      }\r\n      let r = dimensions.radius;\r\n      let minx = dimensions.radius;\r\n      let maxx = dimensions.x - dimensions.radius;\r\n      let miny = dimensions.radius;\r\n      let maxy = dimensions.y - dimensions.radius;\r\n\r\n      let t0 = performance.now();\r\n\r\n      if (dimensions.type === 'random') {\r\n        for (let i = 0; i < 20000; i++) {\r\n          let circle = {\r\n            x: null,\r\n            y: null,\r\n          };\r\n          circle.x = Math.floor(Math.random() * (maxx - minx)) + minx;\r\n          circle.y = Math.floor(Math.random() * (maxy - miny)) + miny;\r\n          data.circles.push(circle);\r\n        }\r\n      } else if(dimensions.type === 'uniform'){\r\n        let xFit = Math.floor(dimensions.x / (dimensions.radius * 2));\r\n        let yFit = Math.floor(dimensions.y / (dimensions.radius * 2));\r\n        for (let y_i = 0; y_i < yFit; y_i++) {\r\n          for (let x_i = 0; x_i < xFit; x_i++) {\r\n              data.circles.push({\r\n                x: dimensions.radius + x_i * 2 * dimensions.radius,\r\n                y: dimensions.radius + y_i * 2 * dimensions.radius\r\n              })          \r\n          }    \r\n               \r\n        }\r\n        \r\n      } else if(dimensions.type === 'analytic'){\r\n\r\n        let maxAngle = Math.PI / 6 //30°;\r\n        let resSteps = 100;\r\n        let temp_data = {\r\n          th: null,\r\n          be: null,\r\n        }\r\n        // sweep through all angles between 0 and 30° always ensuring the sum of the two angles is not more than 30°\r\n        for (let th_i = 0; th_i < resSteps; th_i++) {\r\n          for (let be_i = 0; be_i < resSteps; be_i++) {\r\n            let currTh = maxAngle * th_i / resSteps\r\n            let currBe = maxAngle * be_i / resSteps\r\n            if(maxAngle < currTh + currBe){\r\n              continue\r\n            }\r\n            let circles = createSet(currTh, currBe, dimensions);\r\n            if (circles.length > data.circles.length){\r\n              data.circles = circles;\r\n              temp_data.th = currTh;\r\n              temp_data.be = currBe;\r\n              console.log(\"found a better one with #\" + circles.length);\r\n            }\r\n          }\r\n        } \r\n      }\r\n\r\n      data.performance = performance.now() - t0;\r\n      let circleArea = data.circles.length * Math.PI * (dimensions.radius ^ 2);\r\n      data.efficiency = circleArea / (dimensions.x * dimensions.y - circleArea);\r\n  \r\n      postMessage(data);\r\n    });\r\n\r\n    function createSet(th, be, dimensions){\r\n      let circles = [];\r\n      let r = dimensions.radius;\r\n      let minx = dimensions.radius;\r\n      let maxx = dimensions.x - dimensions.radius;\r\n      let miny = dimensions.radius;\r\n      let maxy = dimensions.y - dimensions.radius;\r\n      let cosTh = 2 * r * Math.cos(th);\r\n      let sinTh = 2 * r * Math.sin(th);\r\n      let cosBe = 2 * r * Math.cos(be);\r\n      let sinBe = 2 * r * Math.sin(be);\r\n      let xFit = Math.floor(dimensions.x / (dimensions.radius * 2));\r\n      let yFit = Math.floor(dimensions.y / (dimensions.radius * 2));\r\n      for (let y_i = 0; y_i < yFit; y_i++) {\r\n        for (let x_i = 0; x_i < xFit; x_i++) {\r\n          let An, Bn, Cn, Dn;\r\n          An = Bn = Cn = Dn = {x: null, y: null}\r\n          let shiftLenX = 2 * x_i * cosTh;\r\n          let shiftLenY = 2 * y_i * cosBe;\r\n          An = {\r\n            x: r + shiftLenX,\r\n            y: r + shiftLenY,\r\n          }\r\n          Bn = {\r\n            x: r + cosTh + shiftLenX,\r\n            y: r + sinTh + shiftLenY\r\n          }\r\n          Cn = {\r\n            x: r + sinBe + shiftLenX,\r\n            y: r + cosBe + shiftLenY\r\n          }\r\n          Dn = {\r\n            x: r + cosTh + sinBe + shiftLenX,\r\n            y: r + cosBe + sinTh + shiftLenY\r\n          }\r\n          if(An.x <= maxx && An.y <= maxy){\r\n            circles.push(An);\r\n          }\r\n          if(Bn.x <= maxx && Bn.y <= maxy){\r\n            circles.push(Bn);\r\n          }\r\n          if(Cn.x <= maxx && Cn.y <= maxy){\r\n            circles.push(Cn);\r\n          }\r\n          if(Dn.x <= maxx && Dn.y <= maxy){\r\n            circles.push(Dn);\r\n          }    \r\n        }\r\n      }\r\n      return circles;\r\n\r\n    }\r\n\r\n  };\r\n\r\n","  \r\nexport default class WebWorker {\r\n    constructor(worker) {\r\n      const code = worker.toString();\r\n      const blob = new Blob([\"(\" + code + \")()\"]);\r\n      return new Worker(URL.createObjectURL(blob));\r\n    }\r\n  }","import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport worker from \"./worker.js\";\r\nimport WebWorker from \"./workerSetup\";\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            ctx: null,\r\n            // circles: []\r\n        }\r\n        this.randomSpot = this.randomSpot.bind(this);\r\n        this.uniformSpots = this.uniformSpots.bind(this);\r\n        this.analyticSpots = this.analyticSpots.bind(this);\r\n        this.drawAll = this.drawAll.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.worker = new WebWorker(worker);\r\n        const canvas = this.refs.canvas;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        const reqAniFrame = requestAnimationFrame;\r\n        this.setState({\r\n            ctx: ctx\r\n        });\r\n        this.worker.addEventListener('message', e => {\r\n            let data = e.data;\r\n            this.props.setMetrics({\r\n                performance: data.performance,\r\n                efficiency: data.efficiency,\r\n                numCircles: data.circles.length\r\n            })\r\n            // requestAnimationFrame(this.drawAll(data));\r\n            this.drawAll(data);\r\n            // this.clearCanvas(this.state.ctx,this.props.width,this.props.height);\r\n            // data.circles.forEach(circle => {\r\n            //     this.drawCircle(this.state.ctx,circle.x, circle.y, this.props.radius);\r\n            // });\r\n            \r\n        });\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.width !== this.props.width || prevProps.height !== this.props.height || prevProps.radius !== this.props.radius){\r\n            \r\n            this.analyticSpots();\r\n        }\r\n        \r\n    }\r\n\r\n    randomSpot(){\r\n        let dimensions = {\r\n            type: 'random',\r\n            x:this.props.width, \r\n            y:this.props.height, \r\n            radius:this.props.radius\r\n        }\r\n        this.worker.postMessage(dimensions);\r\n    }\r\n    uniformSpots(){\r\n        let dimensions = {\r\n            type: 'uniform',\r\n            x:this.props.width, \r\n            y:this.props.height, \r\n            radius:this.props.radius\r\n        }\r\n        this.worker.postMessage(dimensions);\r\n    }\r\n    analyticSpots(){\r\n        let dimensions = {\r\n            type: 'analytic',\r\n            x:this.props.width, \r\n            y:this.props.height, \r\n            radius:this.props.radius\r\n        }\r\n        this.worker.postMessage(dimensions);\r\n    }\r\n    drawAll(data){\r\n        this.clearCanvas(this.state.ctx,this.props.windowwidth,this.props.windowheight);\r\n        this.drawRect(this.state.ctx, 0, 0, this.props.width, this.props.height);\r\n        data.circles.forEach(circle => {\r\n            this.drawCircle(this.state.ctx,circle.x, circle.y, this.props.radius);\r\n        });\r\n    }\r\n    clearCanvas(ctx,x ,y){\r\n        ctx.fillStyle = '#FFFFFF';\r\n        ctx.fillRect(0,0,x,y);\r\n    }\r\n    drawCircle(ctx,x,y,r){\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, r, 0, 2 * Math.PI);\r\n        ctx.fillStyle = \"#FF000F\";\r\n        ctx.fill();\r\n        ctx.stroke();\r\n    }\r\n    drawRect(ctx,x,y,w,h){\r\n        ctx.fillStyle= '#e5eaf3';\r\n        ctx.fillRect(x,y,w,h);\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n          <div>\r\n            <Button onClick={this.randomSpot}>\r\n                Random\r\n            </Button>\r\n            <Button onClick={this.uniformSpots}>\r\n                Uniform\r\n            </Button>\r\n            <Button onClick={this.analyticSpots}>\r\n                Geometric Sweep\r\n            </Button>\r\n            <canvas ref=\"canvas\" width={this.props.windowwidth} height={this.props.windowheight} style={{border:'2px solid black'}} />\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n    export default Canvas\r\n","import React, { useState, useEffect } from 'react';\r\nimport logo from './logo.svg';\r\nimport ContinuousSlider from './Slider.js';\r\nimport Canvas from './Canvas.js';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport './App.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  \r\n  const [canvasWidth, setWidth] = useState(500);\r\n  const [canvasHeight, setHeight] = useState(500);\r\n  const [circleRadius, setRadius] = useState(30);\r\n  const [theta, setTheta] = useState(0);\r\n  const [beta, setBeta] = useState(0);\r\n  const [metrics, setMetrics] = useState({});\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={classes.root}>\r\n        <Grid container direction='rows'>\r\n          <Grid container xs={2} spacing={3} justify = 'center' direction='column'>\r\n            <Grid item >\r\n              <Paper className={classes.paper}>\r\n                <div>\r\n                  Estimates: FittingX: {Math.floor(canvasWidth / (circleRadius *2))} Fitting Y: {Math.floor(canvasHeight / (circleRadius *2))}\r\n                </div>\r\n                <div>\r\n                  # of circles: {metrics.numCircles}\r\n                </div>\r\n                <div>\r\n                  Performance time (ms): {metrics.performance}\r\n                </div>\r\n                <div>\r\n                  Efficiency: (Area circles/Area square): <strong>{metrics.efficiency * 100}</strong>\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item >\r\n              <Paper className={classes.paper}>\r\n                <ContinuousSlider max={1250} min={50} callback={setWidth} label ='X distance'/>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item >\r\n              <Paper className={classes.paper}>\r\n                <ContinuousSlider max={675} min={50} callback={setHeight} label = 'Y Distance'/> \r\n              </Paper>\r\n            </Grid>\r\n            <Grid item >\r\n              <Paper className={classes.paper}>\r\n                <ContinuousSlider  max={100} min={5} callback={setRadius} label = 'Radius'/>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container xs={10} justify='center'>\r\n            <Canvas \r\n              width={canvasWidth} \r\n              height={canvasHeight} \r\n              windowwidth={1250}\r\n              windowheight={675}\r\n              radius={circleRadius} \r\n              setMetrics={setMetrics}/>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}